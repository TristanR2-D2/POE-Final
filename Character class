  public abstract class Character : Tile
    {
       

        protected int HP;
        public int GetHp() { return HP; }

        protected int MaxHP;
        public int GetMaxHP() { return MaxHP; }

        protected int Damage;
        public int GetDamage() { return Damage; }

        public static string[,] VisionArray ;

        public enum Movement { 
            NoMovement=0,
            Up=1, 
            Down=2,
            Left=3,
            Right=4 };

        public Character(int x, int y, string symbol) : base(x, y)
        {
           
        }

        public virtual void Attack()
        { }

        public bool IsDead()
        {
            if (HP == 0)
            { return true; }
            else
            { return false; }
        }

        public virtual bool CheckRange(int AtkRange)
        {
            if (DistanceTo() > AtkRange)
            { return false; }
            else { return true; }
        }

        private int DistanceTo()
        { }

        public void Move()
        {
            Movement movement = new Movement();
            
            if (movement.Equals("Up"))
            { Y = Y + 1; }
            else if (movement.Equals("Down"))
            { Y = Y - 1; }
            else if (movement.Equals("Left"))
            { X = X - 1; }
            else if (movement.Equals("Right"))
            { X = X + 1; }
        }

        public abstract MovementEnum ReturnMove()

        {if (Goblin.ReturnMove() == 0)
            { return "NoMovement"; }
            else if (Goblin.ReturnMove() == 1)
            { return "Up"; }
            else if (Goblin.ReturnMove() == 2)
            { return "Down"; }
            else if (Goblin.ReturnMove() == 3)
            { return "Left"; }
            else if (Goblin.ReturnMove() == 4)
            { return "Right"; }


        }

        public abstract override ToString()

        { Enemy.ToString();
            Hero.ToString();
        }
    }
